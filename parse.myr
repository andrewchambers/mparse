use std

use "ast.use"
use "stab.use"
use "types.use"
use "tokdefs.use"
use "tok.use"
use "util.use"

pkg parse =
	const tsfile	: (ts : tokstream# -> file#)
;;

const tsfile = {ts
	var f
	var t : tok

	f = std.mk([
		.uses = [][:],
		.libs = [][:],
		.extlibs = [][:],
		.dcls = [][:],
		.extinit = [][:],
		.init = `std.None,
		.globls = mkstab(),
		.builtin = mkstab(),
		.ns = std.mkht(std.strhash, std.streq),
	])
	f.globls.super = `std.Some f.builtin
	optendlns(ts)
	while true
		match tokpeek(ts)
		| (l, `Teof):	
			break
		| (l, `Tuse):
			usestmt(ts, f)
		| (l, `Tpkg):
			pkgdef(ts, f)
		| (l, `Ttrait):
			traitdef(ts, f)
		| (l, `Ttype):
			tydef(ts, f)
		| (l, tok):	
			t = tok
			std.put("..ok: {}\n", `Tplus)
			err(l, "invalid top level item near {}", t)
			if !dcl(ts, f)
			;;
		;;
		endlns(ts)
	;;
	-> f
}

const usestmt = {ts, f
	match toknext(ts)
	| (l, `Tuse): /* ok */
	| (l, t):	err(l, "unexpected token in use {}\n", t)
	;;

	match toknext(ts)
	| (l, `Tstrlit str):	f.uses = std.slpush(f.uses, `Ulocal str)
	| (l, `Tident id):	f.uses = std.slpush(f.uses, `Ulib id)
	| (l, t):	err(l, "unexpected {} after use\n", t)
	;;
}

const pkgdef = {ts, f
	match toknext(ts)
	| (l, `Tpkg):	/* ok */
	| (l, t):	err(l, "unexpected token in pkg {}\n", t)
	;;

	match toknext(ts)
	| (l, `Tident id):	setpkg(f, f.globls, id)
	| (l, `Tgap):	/* pkg _ */
	| (l, t):	err(l, "invalid package name {}\n", t)
	;;

	match toknext(ts)
	| (l, `Tasn):	/* ok */
	| (l, t):	err(l, "expected '=' after pkg name, got {}\n", t)
	;;

	pkgbody(ts, f)

	expectendblk(ts, f)
}

const pkgbody = {ts, f
	optendlns(ts)
}

const traitdef = {ts, f
}

const tydef = {ts, f
}

const dcl = {ts, f : file#
	var attrs, isconst, dcls

	attrs = attrlist(ts)

	match toknext(ts)
	| (l, `Tconst):	isconst = true
	| (l, `Tvar):	isconst = false
	| (l, tok):
		if attrs.len == 0
			-> false
		;;
		std.put("dcl loc: {}\n", l)
		err(l, "expected const or var after type attribute, got {}\n", tok)
	;;

	dcls = dcllist(ts, f.globls)
	-> true
}

const attrlist = {ts
	var al

	al = [][:]
	while true
		match tokpeek(ts)
		| (l, `Tattr a):
			toknext(ts)
			al = std.slpush(al, a)
		| _:
			break
		;;
	;;
	-> al
}

const dcllist = {ts, st
	var dl

	dl = [][:]
	while true
		dl = std.slpush(dl, dclbody(ts))
		match tokpeek(ts)
		| (loc, Tcomma):	break
		| _:
		;;
	;;
	-> dl
}

const dclbody = {ts
	var name, init

	match tokpeek(ts)
	| (l, `Tident id):
		name = id
		toknext(ts)
	| (l, tok):
		err(l, "expected declaration name, got {}\n", tok)
	;;

	match tokpeek(ts)
	| (l, `Tasn):
		toknext(ts)
		init = expr(ts)
	| _:
		-> void
	;;

}

const endlns = {ts
	match tokpeek(ts)
	| (l, `Tendln):	optendlns(ts)
	| (l, tok):/*	err(l, "expected \\n, got {}\n", tok) */
		std.put("{}\n", tok)
	;;
}

const optendlns = {ts
	while true
		match tokpeek(ts)
		| (l, `Tendln):	toknext(ts)
		| _:	break
		;;
	;;
}

const expectendblk = {ts, f
	match toknext(ts)
	| (l, `Tendblk):	/* ok */
	| (l, t):	err(l, "expected ;; after block, got {}\n", t)
	;;
}

const expectendln = {ts
	match toknext(ts)
	| (l, `Tendln):	/* ok */
	| (l, t):	err(l, "expected ; or new line, got {}\n", t)
	;;
}

const stmt = {ts
	match tokpeek(ts)
	| (l, `Tfor):	-> forstmt(ts)
	| (l, `Tif):	-> ifstmt(ts)
	| (l, `Tmatch):	-> matchstmt(ts)
	| (l, `Tcolon):	-> lblstmt(ts)
	| (l, _):	-> expr(ts)
	;;
}

const block = {ts
	var stmts
	
	stmts = [][:]
	while true
		match tokpeek(ts)
		| (_, `Tendblk):	break
		| _:	stmts = std.slpush(stmts, stmt(ts))
		;;
	;;
	toknext(ts)
}

const lblstmt = {ts
	var l
	
	(l, _) = toknext(ts)
	match toknext(ts)
	| (_, `Tident id):	stmt(ts)
	| (_, t):	err(l, "expected an identifier as a label, got {}\n", t)
	;;
}

const forstmt = {ts
	var l
	(l, _) = toknext(ts)
	match tokpeek(ts)
	/*
	| (_, `Tvar):
		dcl(ts)
	*/
	| (_, `Tendln):
	| _:
		expr(ts)
	;;
	expectendln(ts)
	match tokpeek(ts)
	| (_, `Tendln):
	| _:
		expr(ts)
	;;
	expectendln(ts)
	match tokpeek(ts)
	| (_, `Tendln):
	| _:
		expr(ts)
	;;
	expectendln(ts)
	block(ts)
}

const ifstmt = {ts
	var l

	(l, _) = toknext(ts)
	expr(ts)
	expectendln(ts)
	block(ts)
}

const matchstmt = {ts
	var l
	
	(l, _) = toknext(ts)
	expr(ts)
	expectendln(ts)
	while true
		match tokpeek(ts)
		| (_, `Tbor):
		| _:	break
		;;
	;;
}

const expr = {ts
	toknext(ts)
}
